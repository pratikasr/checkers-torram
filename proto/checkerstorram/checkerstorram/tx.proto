syntax = "proto3";
package checkerstorram.checkerstorram;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "checkerstorram/checkerstorram/params.proto";

option go_package = "checkers-torram/x/checkerstorram/types";

// Msg defines the Msg service.
service CheckersTorram {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // CheckersCreateGm creates a new game
  rpc CheckersCreateGm(ReqCheckersTorram) returns (ResCheckersTorram);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "checkerstorram/x/checkerstorram/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// ReqCheckersTorram is the request for creating a new game
message ReqCheckersTorram {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  string black = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string red = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// ResCheckersTorram is returned after creating a new game
message ResCheckersTorram {
  string game_index = 1;
}